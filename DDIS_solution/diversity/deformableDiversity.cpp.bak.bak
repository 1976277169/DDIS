#include <algorithm>
#include "mexInterface.h"
#include "../mex_opencv_2.4/MxArray.hpp"
#include "../mex_opencv_2.4/EigenExtensions.h"
#include "../mex_opencv_2.4/MexAsserts.h"
#include "CountArray.h"
#include "tictoc.h"
#include <thread>
#include "deformableDiversity.h"

using namespace std;
using namespace dis;


int FindMaxNNIndex(const Mat<int>& nnfMat)
{
	int nnfArrayLength = nnfMat.width * nnfMat.height;
	const int* nnfArray = &nnfMat(0, 0);
	int maxElement = *std::max_element(nnfArray, nnfArray + nnfArrayLength);
	return maxElement;
}

template <typename TDiversityWeightCountArray>
double calculateOneWindowScore(Block<const Map<const MatrixXi>>& nnfWindowBlock, const Map<MatrixXi>& xyPositions, TDiversityWeightCountArray windowItemsWeights)
{
	auto cols = nnfWindowBlock.cols();
	auto rows = nnfWindowBlock.rows();

	double sum = 0;
	for (int j = 0; j < cols; ++j)
		for (int i = 0; i < rows; ++i)
		{
			int nnIndex = nnfWindowBlock(i, j);

			auto nnPosition = xyPositions.col(nnIndex);
			//auto a = nnPosition(0);
			//auto a2 = nnPosition(1);

			auto currentPosition = Vector2i(j, i);
			//auto b = currentPosition(0);
			//auto b2 = currentPosition(1);
			auto diffVector = nnPosition - currentPosition;
			double R = sqrt(diffVector.squaredNorm());  //TODO cache R
			double weight = windowItemsWeights.GetWeight(nnIndex);
			sum += weight / (R+1);
		}

	return sum;
}

template <typename TDiversityWeightCountArray>
double calculateOneWindowScore(Window<int>& win, const Map<MatrixXi>& xyPositions, TDiversityWeightCountArray windowItemsWeights)
{
	double sum = 0;
	for (auto iter = win.getIterator(); iter.currentItem() != nullptr; iter.next())
	{
		DEBUG_ASSERT(iter.currentItem() != nullptr);
		int nnIndex = *iter.currentItem();
		int i = iter.i();
		int j = iter.j();
		DEBUG_ASSERT(nnIndex == win(i, j));

		auto nnPosition = xyPositions.col(nnIndex);
		//auto a = nnPosition(0);
		//auto a2 = nnPosition(1);

		auto currentPosition = Vector2i(j, i)*scaleFactor_fromW2T;

		//auto b = currentPosition(0);
		//auto b2 = currentPosition(1);
		auto diffVector = nnPosition - currentPosition;
		double R = sqrt(diffVector.squaredNorm());  //TODO cache R
		double weight = windowItemsWeights.GetWeight(nnIndex);
		sum += weight / (R + 1);
	}

	return sum;
}

template <typename TDiversityWeightCountArray>
double calculateOneWindowScoreRZero(Window<int>& win, const Map<MatrixXd>& xyPositions, TDiversityWeightCountArray windowItemsWeights)
{
	double sum = 0;
	for (auto iter = win.getIterator(); iter.currentItem() != nullptr; iter.next())
	{
		DEBUG_ASSERT(iter.currentItem() != nullptr);
		int nnIndex = *iter.currentItem();
		int i = iter.i();
		int j = iter.j();
		DEBUG_ASSERT(nnIndex == win(i, j));

		double weight = windowItemsWeights.GetWeight(nnIndex);
		sum += weight;
	}

	return sum;
}

template <typename TDiversityWeightCountArray>
double calculateOneWindowScore2(Window<int>& win, const Map<MatrixXd>& xyPositions, TDiversityWeightCountArray windowItemsWeights)
{
	const double lambda = 1;
	auto bias = 0;
	const int sz = win.width_ + win.height_;
	auto  winSizeVec = Vector2d(1.0 / sz, 1.0 / sz);
	double deformationCostSum = 0;
	for (auto iter = win.getIterator(); iter.currentItem() != nullptr; iter.next())
	{
		DEBUG_ASSERT(iter.currentItem() != nullptr);
		int nnIndex = *iter.currentItem();
		int i = iter.i();
		int j = iter.j();
		DEBUG_ASSERT(nnIndex == win(i, j));

		auto nnPosition = xyPositions.col(nnIndex);
		//auto a = nnPosition(0);
		//auto a2 = nnPosition(1);

		auto currentPosition = Vector2i(j, i);
		//auto b = currentPosition(0);
		//auto b2 = currentPosition(1);
		Vector2i diffVector = (nnPosition- currentPosition);

		auto tmp = winSizeVec.array() * diffVector.cast<double>().array().abs();
		double deformationCost = tmp.square().sum();
		deformationCostSum += deformationCost;
	}

	double dis = windowItemsWeights.GetNonZeroElementsCount();
	double ddisRaw = dis - lambda*deformationCostSum + bias;
	double ddis = max(0.1, ddisRaw);
	return ddis;
}

template <typename TDiversityWeightCountArray>
double calculateOneWindowScore3(Window<int>& win, const Map<MatrixXd>& xyPositions, TDiversityWeightCountArray windowItemsWeights)
{
	const double lambda = 1;
	auto bias = 0;
	const int sz = win.width_ + win.height_;
	auto  winSizeVec = Vector2d(1.0 / sz, 1.0 / sz);
	//auto  winSizeVec = Vector2d(1.0 / win.width_, 1.0 / win.height_);
	double wSum = 0;
	double deformationCostSum = 0;
	for (auto iter = win.getIterator(); iter.currentItem() != nullptr; iter.next())
	{
		DEBUG_ASSERT(iter.currentItem() != nullptr);
		int nnIndex = *iter.currentItem();
		int i = iter.i();
		int j = iter.j();
		DEBUG_ASSERT(nnIndex == win(i, j));

		auto nnPosition = xyPositions.col(nnIndex);
		//auto a = nnPosition(0);
		//auto a2 = nnPosition(1);
		
		auto currentPosition = Vector2i(j, i);
		//auto b = currentPosition(0);
		//auto b2 = currentPosition(1);
		Vector2i diffVector = nnPosition - currentPosition;
		double weight = windowItemsWeights.GetWeight(nnIndex);

		auto tmp = winSizeVec.array() * diffVector.cast<double>().array().abs();
		double deformationCost = tmp.square().sum();
		wSum += weight;
		deformationCostSum += deformationCost;
	}

	double resRaw = wSum-lambda*deformationCostSum + bias;
	return max(0.1, resRaw);
}

#define CALC_ONE_WINDOW calculateOneWindowScore

void CalcRadiusWeightedDiverisyMap(Mat<int> nnfMat, int windowM, int windowN, const Map<MatrixXd>& xyPositions, double h, Mat<float>& scoreMap, double scaleFactor)
{
	int maxElement = FindMaxNNIndex(nnfMat);
	ASSERT2(maxElement <= xyPositions.cols(), "the amount of xy positions must be greater or equal to the maximum index in the nnf matrix");

	int outputM = scoreMap.height;
	int outputN = scoreMap.width;
	DiwFunctor functor(1, scaleFactor*scaleFactor);

	double countTime = 0;
	double calcWeightTime = 0;

	for (int j = 0; j < outputN; ++j)
	{
		DeformableDiversityWeightArray windowItemsWeights(1 + maxElement, h, scaleFactor*scaleFactor);
		//DeformableDiversityWeightArray2 windowItemsWeights(1 + maxElement, functor);

		// first row
		int i = 0;
		double scaleFactorFromW2T = (1 / scaleFactor);
		if (i < outputM)
		{
			tic();
			Window<int> w(windowN, windowM, j, i, nnfMat);
			windowItemsWeights.CountFrom(w);
			countTime += toc();

			tic();
			//Block<const Map<const MatrixXi>> nnBlock = w.ToEigenBlock();
			scoreMap(i, j) = calculateOneWindowScore(w, xyPositions, windowItemsWeights, scaleFactorFromW2T);
			calcWeightTime += toc();

			const Map<const Matrix<int, Dynamic, Dynamic>> eigenMat(&nnfMat(0, 0), nnfMat.height, nnfMat.width);
			Block<const Map<const MatrixXi>> block2 = eigenMat.block(w.topLeftY_, w.topLeftX_, w.height_, w.width_);
			//DEBUG_ASSERT(nnBlock == block2);
		}

		// all other rows
		for (i = 1; i < outputM; ++i)
		{
			tic();

			Window<int> removedWindow(windowN, 1, j, i - 1, nnfMat);
			windowItemsWeights.ReverseCountFrom(removedWindow);

			Window<int> addedWindow(windowN, 1, j, i + windowM - 1, nnfMat);
			windowItemsWeights.CountFrom(addedWindow);
			countTime += toc();

			tic();
			Window<int> w(windowN, windowM, j, i, nnfMat);
			//Block<const Map<const MatrixXi>> nnBlock = w.ToEigenBlock();
			scoreMap(i, j) = CALC_ONE_WINDOW(w, xyPositions, windowItemsWeights, scaleFactorFromW2T );
			calcWeightTime += toc();
		}
	}

	mexPrintf("countTime= %f\n", countTime);
	mexPrintf("calcWightTime= %f\n", calcWeightTime);
}

struct ddisParams
{
	int startColIndexInclusive;
	int endColIndexExclusive;
	const Mat<int>* pNnfMat;
	Mat<float>* pScoreMap;
	const Map<MatrixXd>* pXyPositions;
	int windowM;
	int windowN;
	double h;
	double scaleFactor = 1.0;
	int maxElement;

	ddisParams(){}

	ddisParams(
		int startColIndexInclusive, int endColIndexExclusive,
		int windowM, int windowN, int h, const Map<MatrixXd>* pXyPositions, 
		Mat<float>* pScoreMap, const Mat<int>* pNnfMat, 
		int maxElement, double scaleFactor) :
		startColIndexInclusive(startColIndexInclusive), endColIndexExclusive(endColIndexExclusive),
		pNnfMat(pNnfMat), pScoreMap(pScoreMap), pXyPositions(pXyPositions),
		windowM(windowM), windowN(windowN), h(h), maxElement(maxElement), scaleFactor(scaleFactor)
	{
	}
};




void CalcDDISMapSnake(
	Mat<int> nnfMat, int windowM, int windowN, const Map<MatrixXd>& xyPositions, double h, Mat<float>& scoreMap,
	int startColIndexInclusive, int endColIndexExclusive, double scaleFactor = 1.0, int* pMaxElement = nullptr)
{
	int maxElement;
	if (pMaxElement == nullptr)
	{
		maxElement = FindMaxNNIndex(nnfMat);
	}
	else
	{
		maxElement = *pMaxElement;
	}
	ASSERT2(maxElement <= xyPositions.cols(), "the amount of xy positions must be greater or equal to the maximum index in the nnf matrix");

	int rowCount = scoreMap.height;
	DiwFunctor functor(1.0, scaleFactor*scaleFactor);
	//DeformableDiversityWeightArray windowItemsWeights(1 + maxElement, h, scaleFactor*scaleFactor);
	DeformableDiversityWeightArray2 windowItemsWeights(1 + maxElement, functor);
	double scaleFactorFromW2T = (1 / scaleFactor);

	for (int j = startColIndexInclusive; j < endColIndexExclusive; ++j)
	{
		int i = 0;
		if (i < rowCount){
			if (j == startColIndexInclusive) {
				// first 
				Window<int> w(windowN, windowM, j, i, nnfMat);
				windowItemsWeights.CountFrom(w);

				//Block<const Map<const MatrixXi>> nnBlock = w.ToEigenBlock();
				scoreMap(i, j) = CALC_ONE_WINDOW(w, xyPositions, windowItemsWeights, scaleFactorFromW2T);

				const Map<const Matrix<int, Dynamic, Dynamic>> eigenMat(&nnfMat(0, 0), nnfMat.height, nnfMat.width);
				Block<const Map<const MatrixXi>> block2 = eigenMat.block(w.topLeftY_, w.topLeftX_, w.height_, w.width_);
				//DEBUG_ASSERT(nnBlock == block2);
			}
			else
			{
				// move right
				Window<int> removedWindow(1, windowM, j - 1, i, nnfMat);
				windowItemsWeights.ReverseCountFrom(removedWindow);

				Window<int> addedWindow(1, windowM, j + windowN - 1, i, nnfMat);
				windowItemsWeights.CountFrom(addedWindow);

				Window<int> w(windowN, windowM, j, i, nnfMat);
				//Block<const Map<const MatrixXi>> nnBlock = w.ToEigenBlock();
				scoreMap(i, j) = CALC_ONE_WINDOW(w, xyPositions, windowItemsWeights, scaleFactorFromW2T);
			}
		}

		// scanning down
		for (i = 1; i < rowCount; ++i)
		{
			Window<int> removedWindow(windowN, 1, j, i - 1, nnfMat);
			windowItemsWeights.ReverseCountFrom(removedWindow);

			Window<int> addedWindow(windowN, 1, j, i + windowM - 1, nnfMat);
			windowItemsWeights.CountFrom(addedWindow);

			Window<int> w(windowN, windowM, j, i, nnfMat);
			//Block<const Map<const MatrixXi>> nnBlock = w.ToEigenBlock();
			scoreMap(i, j) = CALC_ONE_WINDOW(w, xyPositions, windowItemsWeights, scaleFactorFromW2T);
		}


		if (++j < endColIndexExclusive)
		{
			// move right
			{
				--i; //correct i back to a valid (and last) index
				Window<int> removedWindow(1, windowM, j - 1, i, nnfMat);
				windowItemsWeights.ReverseCountFrom(removedWindow);

				Window<int> addedWindow(1, windowM, j + windowN - 1, i, nnfMat);
				windowItemsWeights.CountFrom(addedWindow);

				Window<int> w(windowN, windowM, j, i, nnfMat);
				//Block<const Map<const MatrixXi>> nnBlock = w.ToEigenBlock();
				scoreMap(i, j) = CALC_ONE_WINDOW(w, xyPositions, windowItemsWeights, scaleFactorFromW2T);
				--i;
			}
			// scanning up
			for (; i >= 0; --i)
			{
				Window<int> removedWindow(windowN, 1, j, i + windowM, nnfMat);
				windowItemsWeights.ReverseCountFrom(removedWindow);

				Window<int> addedWindow(windowN, 1, j, i, nnfMat);
				windowItemsWeights.CountFrom(addedWindow);

				Window<int> w(windowN, windowM, j, i, nnfMat);
				//Block<const Map<const MatrixXi>> nnBlock = w.ToEigenBlock();
				scoreMap(i, j) = CALC_ONE_WINDOW(w, xyPositions, windowItemsWeights, scaleFactorFromW2T);
			}
		}
	}
}

void CalcDDISMapSnake(Mat<int> nnfMat, int windowM, int windowN, const Map<MatrixXd>& xyPositions, double h, Mat<float>& scoreMap)
{
	int endColIndexExclusive = scoreMap.width;
	int startColIndexInclusive = 0;
	CalcDDISMapSnake(nnfMat, windowM, windowN, xyPositions, h, scoreMap, startColIndexInclusive, endColIndexExclusive);
}

void CalcDDISMapSnake_ThreadFunc(ddisParams p)
{
	CalcDDISMapSnake(*p.pNnfMat, p.windowM, p.windowN, *p.pXyPositions, p.h, *p.pScoreMap, p.startColIndexInclusive, p.endColIndexExclusive, p.scaleFactor, &p.maxElement);
}

Map<MatrixXd> LoadXyPositions(const mxArray** inputs)
{
	MxArray mxXYPositions = MxArray(inputs[Idx::IN_xyPositons]);
	auto xyPositions = mexArray2EigenMat_double(mxXYPositions);

	ASSERT2(
		xyPositions.cols() == 2 || xyPositions.rows() == 2,
		"argument xyPositions must be a matrix of (2 X N) where N is the amount of available patches in the database. N must be greater than the maximum index of in the nnf matrix");

	if (xyPositions.cols() == 2)
	{
		xyPositions.transposeInPlace();
	}

	return xyPositions;
}

void dis::DeformableDiversity(mxArray** outputs, int inputsElementCount, const mxArray** inputs, unsigned nthreads)
{
	if (nthreads <= 0)
	{
		nthreads = NTHREADS;
	}

	/*  loading Nearest neighbor field map */
	int windowM, windowN;
	Mat<int> nnfMat = ExtractNnfAndWindow(inputs, windowM, windowN);
	int nnfM = nnfMat.height;
	int nnfN = nnfMat.width;
	const int* nnfArray = &nnfMat(0, 0);
	ASSERT2(inputsElementCount >= Idx::IN_xyPositons + 1, "missing argument: xy positions matrix");
	Map<MatrixXd> xyPositions = LoadXyPositions(inputs);

	double scaleFactor = 1.0;
	if (inputsElementCount >= Idx::IN_ScaleFactor + 1)
	{
		scaleFactor = MxArray(inputs[Idx::IN_ScaleFactor]).toDouble();
	}


	double h = 1;
	if (inputsElementCount >= Idx::IN_h + 1)
	{
		h = MxArray(inputs[Idx::IN_h]).toDouble();
	}

	Mat<float> diversityScoreMap = CreateOutputScoreMap(outputs, windowM, windowN, nnfM, nnfN);

	std::vector<ddisParams> paramsVec(nthreads);
	std::vector<thread> threadVec(nthreads - 1);  // minus one since using the current thread
	int outputN = diversityScoreMap.width;

	int chunkSize = outputN / nthreads;
	int leftoverModulu = outputN % nthreads;
	int startRangeInclusive = 0;
	int maxElement = FindMaxNNIndex(nnfMat);
	for (int i = 0; i < paramsVec.size(); i++)
	{
		int endRangeExclusive = startRangeInclusive + chunkSize;
		if (leftoverModulu > 0)
		{
			++endRangeExclusive;
			--leftoverModulu;
		}

		paramsVec[i] = ddisParams(
			startRangeInclusive, endRangeExclusive, windowM, windowN, h,
			&xyPositions, &diversityScoreMap, &nnfMat, maxElement, scaleFactor);

		startRangeInclusive = endRangeExclusive;
	}

	//Launch threads 1 to NTHREADS-1
	for (int threadInd = 0; threadInd < threadVec.size(); threadInd++)
	{
		threadVec.at(threadInd) = thread(CalcDDISMapSnake_ThreadFunc, std::ref(paramsVec[threadInd]));
		//CalcDDISMapSnake_ThreadFunc(paramsVec[threadInd]);
	}

	//using the current thread as the last thread, updating a chunk of old patches
	CalcDDISMapSnake_ThreadFunc(paramsVec[nthreads - 1]);

	//Wait for all threads to finish
	for (int threadInd = 0; threadInd < threadVec.size(); ++threadInd)
	{
		threadVec[threadInd].join();
	}
}
